---
  - name: install curl
    apt:
        name: curl
        state: present

  - name: check for legacy iptables
    shell: ls -l /etc/alternatives/iptables
    register: alternatives_iptables
    changed_when: false

  - name: switch to legacy iptables
    shell: |
        iptables -F;
        update-alternatives --set iptables /usr/sbin/iptables-legacy;
        update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
    when: not 'legacy' in alternatives_iptables.stdout

  - name: reboot after changing iptables to legacy
    reboot:
    when: not 'legacy' in alternatives_iptables.stdout

  - name: Check to see if the control plane exists
    get_url:
        url: https://{{ kube_control_plane_ip }}:{{ kube_control_plane_port }}
        dest: /dev/null
        validate_certs: false
    failed_when: false
    changed_when: false
    register: kube_control_plane_check

  - name: If the control plane does not exist, start an initial controller
    run_once: true
    shell: export K3S_TOKEN={{ k3s_token }};
        curl -sdL https://get.k3s.io | sh -s - server --cluster-init
            --tls-san https://{{ kube_control_plane_ip }}
    when: not 'status_code' in kube_control_plane_check
        # or kube_control_plane_check.status_code != 200

  - name: Start any remaining control plane members
    shell:
        cmd: export K3S_TOKEN={{ k3s_token }};
            curl -sdL https://get.k3s.io | sh -s - server --server
              https://{{ kube_control_plane_ip }}:{{ kube_control_plane_port }}
              --tls-san https://{{ kube_control_plane_ip }}
        creates: /usr/local/bin/k3s
    failed_when: false # TODO: the command line can timeout while the process
                       # continues and install eventually succeeds.

  - name: synchronize the manifests directory
    synchronize:
        src: "{{ playbook_dir }}/manifests"
        dest: /var/lib/
        archive: no
        checksum: yes
        recursive: yes
        links: yes
        use_ssh_args: yes

  - name: apply the manifests
    command: kubectl apply -f /var/lib/manifests/{{ item }}
    run_once: true
    register: kube_apply_manifests
    changed_when: "'configured' in kube_apply_manifests.stdout or
        'created' in kube_apply_manifests.stdout"
    loop: "{{ kube_manifests }}"
