---
  - name: install curl
    apt:
        name: curl
        state: present

  - name: check for legacy iptables
    shell: ls -l /etc/alternatives/iptables
    register: alternatives_iptables
    changed_when: false

  - name: Workaround for systemd overwriting flannel mac addresses (flannel bug 1155)
    copy:
        dest: /etc/systemd/network/10-flannel.link
        mode: 0755
        content: |
            [Match]
            OriginalName=flannel*

            [Link]
            MACAddressPolicy=none

  - name: switch to legacy iptables
    shell: |
        iptables -F;
        update-alternatives --set iptables /usr/sbin/iptables-legacy;
        update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
    when: not 'legacy' in alternatives_iptables.stdout

  - name: reboot after changing iptables to legacy
    reboot:
    when: not 'legacy' in alternatives_iptables.stdout

  - name: Check to see if the control plane exists
    get_url:
        url: https://{{ kube_control_plane_ip }}:{{ kube_control_plane_port }}
        dest: /dev/null
        validate_certs: false
    failed_when: false
    changed_when: false
    register: kube_control_plane_check

  - name: If the control plane does not exist, start an initial controller
    run_once: true
    shell: export K3S_TOKEN={{ k3s_token }};
        curl -sdL https://get.k3s.io | sh -s - server --cluster-init
            --tls-san https://{{ kube_control_plane_ip }}
            --node-taint CriticalAddonsOnly=true:NoExecute
            --write-kubeconfig-mode=640
    when: not 'status_code' in kube_control_plane_check
        # or kube_control_plane_check.status_code != 200

  - name: Start any remaining control plane members
    shell:
        cmd: export K3S_TOKEN={{ k3s_token }};
            curl -sdL https://get.k3s.io | sh -s - server --server
              https://{{ kube_control_plane_ip }}:{{ kube_control_plane_port }}
              --tls-san https://{{ kube_control_plane_ip }}
              --node-taint CriticalAddonsOnly=true:NoExecute
              --write-kubeconfig-mode=640
        creates: /usr/local/bin/k3s
    failed_when: false # TODO: the command line can timeout while the process
                       # continues and install eventually succeeds.

  - name: Allow admin users to access kubectl without sudo
    file:
        path: /etc/rancher/k3s/k3s.yaml
        owner: root
        group: admin
        mode: '0640'

  - name: Make sure the bash completion directory exists
    file:
        path: /etc/bash_completion.d
        state: directory

  - name: Set up bash completion for kubectl
    shell:
        cmd: kubectl completion bash >/etc/bash_completion.d/kubectl
        creates: /etc/bash_completion.d/kubectl

  - name: set up default KUBECONFIG path
    copy:
        dest: /etc/profile.d/k3s-kubeconfig-path.sh
        content: |
            # set the default kubectl config path to the k3s kubeconfig file
            export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        mode: '0644'

  - name: Install the virtctl command for kubevirt
    shell:
        cmd: curl -L -o /usr/local/bin/virtctl
            https://github.com/kubevirt/kubevirt/releases/download/{{
            kubevirt_version }}/virtctl-{{ kubevirt_version }}-linux-amd64
            && chmod a+x /usr/local/bin/virtctl
        creates: /usr/local/bin/virtctl
