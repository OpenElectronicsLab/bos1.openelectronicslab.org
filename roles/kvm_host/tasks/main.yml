---
  - name: install required packages
    apt:
        name: "{{ item }}"
        state: present
    loop:
      - qemu-kvm
      - libvirt-daemon-system
      - virtinst
      - libguestfs-tools
      - bridge-utils
      - nftables
      - rsync

  - name: Add admin users to the 'libvirt' group
    user:
        name: "{{ item.username }}admin"
        groups: libvirt
        append: yes
    loop: "{{ admin_users }}"

  - name: list existing kvm storage pools
    command: virsh pool-list --all
    register: virsh_pool_list
    changed_when: false

  - name: create lvm-based kvm storage pools
    command: virsh pool-define-as {{ item.key }} logical
                --source-dev {{ item.value.device }}
                --source-name {{ item.value.volume_group }}
                --target /dev/{{ item.value.volume_group }}
    when: item.key not in virsh_pool_list.stdout
    with_dict: "{{ kvm_lvm_pools }}"

  - name: start kvm storage pools
    command: virsh pool-start {{ item.key }}
    when: item.key not in virsh_pool_list.stdout
    with_dict: "{{ kvm_lvm_pools }}"

  - name: set lvm-based kvm storage pools to autostart
    command: virsh pool-autostart {{ item.key }}
    when: item.key not in virsh_pool_list.stdout
    with_dict: "{{ kvm_lvm_pools }}"

  - name: check to see if the kvm volumes exist
    shell: virsh vol-list {{ item.value.pool }} | grep -e " {{ item.key }} "
    register: kvm_vol_list
    failed_when: false
    changed_when: false
    with_dict: "{{ kvm_volumes }}"

  - name: create the kvm volumes
    command: virsh vol-create-as {{ item[0].value.pool }} {{ item[0].key }}
        {{ item[0].value.size }}
    when: item[1].rc != 0
    loop: "{{ kvm_volumes | dict2items | zip(kvm_vol_list.results) | list }}"

  - name: Configure bridge networks
    copy:
        dest: /etc/network/interfaces.d/60-{{ item.key }}
        content: |
            auto {{ item.key }}
            iface {{ item.key }} inet static
                address {{ item.value.subnet.gateway }}
                broadcast {{ item.value.subnet.broadcast }}
                netmask {{ item.value.subnet.netmask }}
                bridge_ports none
    register: configure_bridge
    with_dict: "{{ bridges }}"

  - name: restart bridge
    command: bash -c "
        ifdown --ignore-errors {{ item.item.key }} ;
        ifup --ignore-errors {{ item.item.key }}
        "
    when: item.changed
    loop: "{{ configure_bridge.results }}"

  - name: Enable IPv4 forwarding in /etc/sysctl.conf
    lineinfile:
        path: /etc/sysctl.conf
        regexp: '^\s*net.ipv4.ip_forward\s*='
        line: net.ipv4.ip_forward=1
    register: enable_forwarding

  - name: If needed, enable forwarding in the running kernel
    command: sysctl -w net.ipv4.ip_forward=1
    when: enable_forwarding.changed

  - name: Add hosts on local bridges to known hosts
    include_role:
        role: add_subnet_to_hosts_file
    vars:
        subnet: "{{ bridge_iter.value.subnet }}"
    with_dict: "{{ bridges }}"
    loop_control:
        loop_var: bridge_iter

  - name: Add basic nat table
    blockinfile:
        insertafter: "flush ruleset"
        path: /etc/nftables.conf
        marker: "# Ansible-managed NAT table {mark}"
        block: |

            table ip nat {
                chain prerouting {
                    type nat hook prerouting priority -100;
                }
                chain postrouting {
                    type nat hook postrouting priority 100;
                }
            }
    notify: nftables changed

  - name: Add internet SNAT rules for bridges
    lineinfile:
        path: /etc/nftables.conf
        regexp:
        line:
            '        ip saddr {{ item.value.subnet.gateway }}-{{
            item.value.subnet.broadcast }} oif {{ primary_interface }} snat
                {{ network_interfaces[primary_interface].subnet
                    .hosts[inventory_hostname_short].ip }};'
        insertafter: type nat hook postrouting priority 100;
    with_dict: "{{ bridges }}"
    notify: nftables changed

  - name: Create the install media directory
    file:
        path: /media/install-media
        state: directory

  - name: Copy custom pxelinux.cfg files for each machine
    synchronize:
        src: "{{ playbook_dir }}/build/make_install_media/{{
            hostvars[item].inventory_hostname
            }}/autoinstall.iso"
        dest: /media/install-media/{{ hostvars[item].inventory_hostname_short
            }}.iso
        archive: no
        checksum: yes
        use_ssh_args: yes
#    when: (the vm matches the host)
    with_inventory_hostnames:
      - kvm_guests
