---
  - name: install required packages
    apt:
        name: "{{ item }}"
        state: present
    loop:
      - qemu-kvm
      - libvirt-daemon-system
      - virtinst
      - libguestfs-tools
      - bridge-utils
      - nftables
      - rsync

  - name: Add admin users to the 'libvirt' group
    user:
        name: "{{ item.username }}admin"
        groups: libvirt
        append: yes
    loop: "{{ admin_users }}"

  - name: list existing kvm storage pools
    command: virsh pool-list --all
    register: virsh_pool_list
    changed_when: false

  - name: list existing LVM volume groups
    command: vgscan
    register: lvm_vg_list
    changed_when: false

  - name: create lvm-based kvm storage pools
    command: virsh pool-define-as {{ item.key }} logical
                --source-dev {{ item.value.device }}
                --source-name {{ item.value.volume_group }}
                --target /dev/{{ item.value.volume_group }}
    when: item.key not in virsh_pool_list.stdout
    with_dict: "{{ kvm_lvm_pools }}"

  - name: build kvm storage pools
    command: virsh pool-build {{ item.key }}
    when: item.value.volume_group not in lvm_vg_list.stdout
    with_dict: "{{ kvm_lvm_pools }}"

  - name: start kvm storage pools
    command: virsh pool-start {{ item.key }}
    when: item.key not in virsh_pool_list.stdout
    with_dict: "{{ kvm_lvm_pools }}"

  - name: set lvm-based kvm storage pools to autostart
    command: virsh pool-autostart {{ item.key }}
    when: item.key not in virsh_pool_list.stdout
    with_dict: "{{ kvm_lvm_pools }}"

  - name: check to see if the kvm volumes exist
    shell: virsh vol-list {{ item.value.pool }} | grep -e " {{ item.key }} "
    register: kvm_vol_list
    failed_when: false
    changed_when: false
    with_dict: "{{ kvm_volumes_provided }}"

  - name: create the kvm volumes
    command: virsh vol-create-as {{ item[0].value.pool }} {{ item[0].key }}
        {{ item[0].value.size }}
    when: item[1].rc != 0
    loop: "{{ kvm_volumes_provided | dict2items | zip(kvm_vol_list.results)
        | list }}"

  - name: check to see if the libvirt default network exist
    shell: virsh net-list --all | grep -e "default"
    register: libvirt_net_list
    failed_when: false
    changed_when: false

  - name: shut down the libvirt default network to keep it from changing iptables
    command: virsh net-destroy default
    failed_when: false
    when: libvirt_net_list.rc == 0

  - name: remove the libvirt default network to keep it from changing iptables
    command: virsh net-undefine default
    when: libvirt_net_list.rc == 0

  - name: Configure bridge networks
    copy:
        dest: /etc/network/interfaces.d/60-{{ item.key }}
        content: |
            auto {{ item.key }}
            iface {{ item.key }} inet static
                address {{ item.value.subnet.gateway }}
                broadcast {{ item.value.subnet.broadcast }}
                netmask {{ item.value.subnet.netmask }}
                bridge_ports none
    register: configure_bridge
    with_dict: "{{ bridges }}"

  - name: restart bridge
    command: bash -c "
        ifdown --ignore-errors {{ item.item.key }} ;
        ifup --ignore-errors {{ item.item.key }}
        "
    when: item.changed
    loop: "{{ configure_bridge.results }}"

  - name: Enable IPv4 forwarding in /etc/sysctl.conf
    lineinfile:
        path: /etc/sysctl.conf
        regexp: '^\s*net.ipv4.ip_forward\s*='
        line: net.ipv4.ip_forward=1
    register: enable_forwarding

  - name: If needed, enable forwarding in the running kernel
    command: sysctl -w net.ipv4.ip_forward=1
    when: enable_forwarding.changed

  - name: Add basic nat table
    blockinfile:
        insertafter: "flush ruleset"
        path: /etc/nftables.conf
        marker: "# Ansible-managed NAT table {mark}"
        # Lack of indention of nested-for-loops so that the end file is not
        # weirdly indented.
        block: |

            table ip nat {
                chain prerouting {
                    type nat hook prerouting priority -100;
                }
                chain postrouting {
                    type nat hook postrouting priority 100;
            {% for bridgename, bridgevals in bridges.items() %}
            {% for ifname, ifvals in network_interfaces.items() %}
            {% if ifvals.provide_nat is defined and ifvals.provide_nat %}
                    ip saddr {{ bridgevals.subnet.subnet }}/{{
                        bridgevals.subnet.CIDR }} oif {{ ifname
                        }} snat {{ network_interfaces[ifname].subnet
                    .hosts[inventory_hostname_short].ip }};
            {% endif %}
            {% endfor %}
            {% endfor %}
                }
            }
    notify: nftables changed

  - name: Create the install media directory
    file:
        path: /media/install-media
        state: directory

  - name: Copy install media files for each virtual machine
    synchronize:
        src: "{{ playbook_dir }}/build/make_install_media/{{
            hostvars[item].inventory_hostname
            }}/autoinstall.iso"
        dest: /media/install-media/{{ hostvars[item].inventory_hostname_short
            }}.iso
        archive: no
        checksum: yes
        use_ssh_args: yes
    loop: "{{ guest_vms }}"

  - name: Create libvirt hooks
    notify: libvirt config changed
    copy:
        dest: /etc/libvirt/hooks/qemu
        mode: 0755
        content: |
            #!/bin/bash

            # shared hooks
            case "$2" in
                started|restore)
                    # There's no easy way to set the MTU for a vnet adapter
                    # until the VM is created, and you can't reliably set the
                    # MTU for a bridge until the first vnet adapter is added.
                    # We thus just set the MTU's for all of the virtual
                    # adapters (and the bridge) whenever a VM is created.
                    #
                    # Workaround inspired from:
                    # https://blog.patshead.com/2018/03/ip-over-infiniband-and-kvm-virtual-machines.html
            {% for bridgename, bridgevals in bridges.items() %}
            {% if bridgevals.subnet.mtu is defined %}
                    for vnet in $(sudo bridge link | grep {{ bridgename }} | \
                            sed -e "s/.*\(vnet[0-9]*\).*/\1/g"); do
                        ip link set $vnet mtu {{ bridgevals.subnet.mtu }}
                    done
                    ip link set {{ bridgename }} mtu {{ bridgevals.subnet.mtu }}
            {% endif %}
            {% endfor %}
                    ;;

            esac

            # machine specific hooks
            case "$1" in
            {% for vm in guest_vms %}
                {{ hostvars[vm].inventory_hostname_short }})
            {% if hostvars[vm].host_devices is defined %}
                    case "$2" in
                        prepare)
                            # detach any host drivers
            {% for device in hostvars[vm].host_devices %}
                            virsh nodedev-detach {{ device }}
            {% endfor %}
                            ;;

                        release)
                            # reattach any host drivers
            {% for device in hostvars[vm].host_devices %}
                            virsh nodedev-reattach {{ device }}
            {% endfor %}
                            ;;
                    esac
            {% endif %}
                    ;;
            {% endfor %}
            esac
